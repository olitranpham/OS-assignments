ABA Problem (2 pt)
The enqueue algorithm we discussed in class didn’t quite actually work, because of the issue of ABA problem.
Use your own words to explain what ABA problem is and explain why the algorithm presented in class didn’t work.
Cite at least three *credible* resources, and explain why the resources are credible.

The ABA problem is a common issue regarding concurrent programming that occurs when using operations such as compare-and-swap (CAS) that manage to share data without locks. It happens when a thread reads a memory location and sees the value "A," but when paused, a second thread changes the value to "B" and then back to "A." When the first thread is unpaused, it checks and finds the value still equal to "A" and incorrectly assumes that nothing has changes. When in reality, the data could have been modified and restored, creating inconsistencies or corruption in shared data structures. This problem usually happens in lock-free algorithms that depend on an equal number of pointers, rather than more complex mechanisms that ensure no other operations have occurred.

The enqueue algorithm presented in class did not work because it relied on CAS to compare pointers (Q->Tail and myTail->next). The algorithm assumes that if myTail still equals Q->tTail and myTail->next is null, then the queue's tail hasn't been changed and it is safe to link another node. However, another thread can still enqueue and dequeue nodes, temporarily changing the tail pointer and then restoring it to the same value. As a result, CAS can stillk run even though the structure of the queue has changed. This will lead to incorrect links, lost nodes, and other inconsistencies since the algorithm can't differentiate between the original value "A" state and new "A" state that occurred. 

Sources
1. Baeldung. “The ABA Problem in Concurrency.” Baeldung on Computer Science, 2024, https://www.baeldung.com/cs/aba-concurrency.
  a. This lecture  from a grad-level CS course is a credible academic source that was written by a leading researcher in high-performance computing and parallel programming. It clearly explains the ABA problem and recognized mitigation techniques. 

2. Dechev, Damian, Peter Pirkelbauer, and Bjarne Stroustrup. Understanding and Effectively Preventing the ABA Problem in Descriptor-Based Lock-Free Designs. U.S. Department of Energy Office of Scientific and Technical Information (OSTI), 2010, https://www.osti.gov/servlets/purl/1124348.
  a. This article is a reliable resource for software engineers that was reviewed by domain experts and widely used for professional education. 

3. Hoefler, Torsten. “Concurrency Theory – The ABA Problem.” Parallel Programming (Lecture 21), ETH Zürich, Spring 2020, https://spcl.inf.ethz.ch/Teaching/2020-pp/lectures/PP-l21-ConcurrencyTheory.pdf. 
  a. This peer-reviewed research paper, published by the US Department of Energy and co-authored by the creator of C++, is a credible soruce that presents theoretical methods for preventing the ABA problem in lock-free systems. 
